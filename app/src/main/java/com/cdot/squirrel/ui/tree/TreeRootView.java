package com.cdot.squirrel.ui.tree;

import android.content.Context;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import com.cdot.squirrel.ui.databinding.TreeRootViewBinding;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

/**
 * A container for a tree view
 */
public class TreeRootView extends TreeNodeView {
    private static final String NODES_PATH_SEPARATOR = ";";

    private Context mContext;
    private TreeRootViewBinding mRootBinding;

    /**
     * Construct a view tree for the given context and tree root
     *
     * @param context the context
     * @param root    the root of the TreeNode hierarchy
     */
    public TreeRootView(Context context, TreeNode root) {
        super(null, root);
        mRootView = this; // can't pass this to super
        mContext = context;
    }

    public Context getContext() {
        return mContext;
    }

    @Override
    public ViewGroup getChildrenView() {
        return mRootBinding.treeRoot;
    }

   /**
     * Get the View for the root of a tree
     *
     * @return a View
     */
    public View createView(LayoutInflater inflater) {
        mRootBinding = TreeRootViewBinding.inflate(inflater, null, false);
        mTreeNode.mTreeNodeView = this;
        expand(false);
        return mRootBinding.getRoot();
    }

    /**
     * Get a string that can be used to restore the open/closed state of the tree
     *
     * @return a string representation of the tree state
     */
    public String getSaveState() {
        final StringBuilder builder = new StringBuilder();
        getSaveState(mTreeNode, builder);
        if (builder.length() > 0) {
            builder.setLength(builder.length() - 1);
        }
        return builder.toString();
    }

    // Recursive, do the work of public getSaveState
    private TreeRootView getSaveState(TreeNode root, StringBuilder sBuilder) {
        for (TreeNode node : root.getChildren()) {
            if (node.mExpanded) {
                sBuilder.append(node.getPath());
                sBuilder.append(NODES_PATH_SEPARATOR);
                getSaveState(node, sBuilder);
            }
        }
        return this;
    }

    /**
     * Restore the open/closed state of the tree from a string generated by getSaveState()
     *
     * @return thid, to allow chaining
     */
    public TreeRootView restoreState(String saveState) {
        if (!TextUtils.isEmpty(saveState)) {
            collapse(true);
            final String[] openNodesArray = saveState.split(NODES_PATH_SEPARATOR);
            final Set<String> openNodes = new HashSet<>(Arrays.asList(openNodesArray));
            restoreState(mTreeNode, openNodes);
        }
        return this;
    }

    // Recursive, do the work of public restoreState
    private TreeRootView restoreState(TreeNode node, Set<String> openNodes) {
        for (TreeNode n : node.getChildren()) {
            if (openNodes.contains(n.getPath())) {
                n.mTreeNodeView.expand(false);
                restoreState(n, openNodes);
            }
        }
        return this;
    }

    //Add / Remove

    public void addNode(TreeNode parent, final TreeNode nodeToAdd) {
        // Add to the treenode hierarchy
        parent.addChild(nodeToAdd);
        if (parent.mExpanded)
            // Make a view
            parent.mTreeNodeView.addChildView(nodeToAdd);
    }

    public void removeNode(TreeNode node) {
        if (node.mParent != null) {
            TreeNode parent = node.mParent;
            // Remove from the treenode hierarchy
            int index = parent.deleteChild(node);
            if (parent.mExpanded && index >= 0) {
                // Remove the view. Note that the view is retained, so if this
                // node is subsequently re-attached elsewhere, it does not have to
                // be reconstructed.
                final TreeNodeView pv = parent.mTreeNodeView;
                if (pv != null)
                    pv.removeChildView(index);
            }
        }
    }
}
